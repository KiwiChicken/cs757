syntax = "proto3";

package kvstore;
// import "google/protobuf/empty.proto";

service KeyValueStore {
    rpc Put(KeyValue) returns (Empty) {}
    rpc Get(Key) returns (Value) {}
    rpc UpdateEpochInfo(ServerLoad) returns (Empty) {}
    rpc ShareCacheState(CacheState) returns (Empty) {}
}

message Key {
    string key = 1;
}

message Value {
    string value = 1;
}

message KeyValue {
    Key key = 1;
    Value value = 2;
}

message Empty {}

// if monitor deems necessary, specify the blocks a server instance should bring into cache
message CacheUpdate {
  repeated string keys = 1;
}

// server shares cache info to monitor, can then be forwarded to a primary server to aid decision making
// used to simulate and replicate cache state

message ServerLoad {
  uint32 server_id = 1;
  uint32 req_cnt = 2; // requests in last epoch
}


message CacheState {
  uint32 server_id = 1;
  uint32 req_cnt = 2; // requests in last epoch
  uint64 cache_data_hit = 3;
  uint64 cache_data_miss = 4;
  uint64 cache_data_bytes_insert = 5;   // cache overwrite traffic
  repeated string hot_keys = 7;
}
