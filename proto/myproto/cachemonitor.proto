syntax = "proto3";

package kvstore;
// import "google/protobuf/empty.proto";
import "myproto/kvstore.proto";

// if monitor deems necessary, specify the blocks a server instance should bring into cache
message CacheUpdate {
  repeated string keys = 1;
}

// server shares cache info to monitor, can then be forwarded to a primary server to aid decision making
// used to simulate and replicate cache state
message request {
  bool is_put = 1;
  string key = 2;
  uint32 val_size = 3;
}

message CacheState {
  uint32 server_id = 1;
  uint32 epoch = 2;// TODO: determine epoch len
  uint32 cache_data_hit = 3;
  uint32 cache_data_miss = 4;
  uint32 cache_data_bytes_insert = 5;
  repeated string requests = 6; // for now all requests in last epoch
}

message ServerLoad {
  uint32 server_id = 1;
  uint32 req_cnt = 2; // requests in last epoch
}

service CacheMonitor {
  rpc ShareCacheState(CacheState) returns (kvstore.Empty) {}
}
